using System;

class Program
{
    // ğŸ”¹ Node sÄ±nÄ±fÄ±: her dÃ¼ÄŸÃ¼m bir Ã¶ÄŸrenciyi temsil eder
    public class Node
    {
        public string Ad;
        public string Soyad;
        public string Numara;
        public Node Next;

        public Node(string ad, string soyad, string numara)
        {
            Ad = ad;
            Soyad = soyad;
            Numara = numara;
            Next = null;
        }

        public override string ToString()
        {
            return $"{Numara} - {Ad} {Soyad}";
        }
    }

    // ğŸ”¹ BaÄŸlÄ± Liste sÄ±nÄ±fÄ±
    public class BagliListe
    {
        private Node head;

        public BagliListe()
        {
            head = null;
        }

        // ğŸ”¸ BaÅŸa Ã¶ÄŸrenci ekleme
        public void BasaEkle(string ad, string soyad, string numara)
        {
            Node yeni = new Node(ad, soyad, numara);
            yeni.Next = head;
            head = yeni;
            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci baÅŸa eklendi.");
        }

        // ğŸ”¸ Sona Ã¶ÄŸrenci ekleme
        public void SonaEkle(string ad, string soyad, string numara)
        {
            Node yeni = new Node(ad, soyad, numara);
            if (head == null)
            {
                head = yeni;
                Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci sona eklendi.");
                return;
            }

            Node current = head;
            while (current.Next != null)
                current = current.Next;

            current.Next = yeni;
            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci sona eklendi.");
        }

        // ğŸ”¸ Belirli bir Ã¶ÄŸrenciden SONRA ekleme
        public void SonraEkle(string hedefNumara, string ad, string soyad, string numara)
        {
            Node current = head;
            while (current != null && current.Numara != hedefNumara)
                current = current.Next;

            if (current == null)
            {
                Console.WriteLine($"{hedefNumara} numaralÄ± Ã¶ÄŸrenci bulunamadÄ±.");
                return;
            }

            Node yeni = new Node(ad, soyad, numara);
            yeni.Next = current.Next;
            current.Next = yeni;

            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci {hedefNumara} numarasÄ±ndan sonra eklendi.");
        }

        // ğŸ”¸ Belirli bir Ã¶ÄŸrenciden Ã–NCE ekleme
        public void OnceEkle(string hedefNumara, string ad, string soyad, string numara)
        {
            if (head == null)
            {
                Console.WriteLine("Liste boÅŸ!");
                return;
            }

            if (head.Numara == hedefNumara)
            {
                BasaEkle(ad, soyad, numara);
                return;
            }

            Node prev = null;
            Node current = head;

            while (current != null && current.Numara != hedefNumara)
            {
                prev = current;
                current = current.Next;
            }

            if (current == null)
            {
                Console.WriteLine($"{hedefNumara} numaralÄ± Ã¶ÄŸrenci bulunamadÄ±.");
                return;
            }

            Node yeni = new Node(ad, soyad, numara);
            prev.Next = yeni;
            yeni.Next = current;

            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci {hedefNumara} numarasÄ±ndan Ã¶nce eklendi.");
        }

        // ğŸ”¸ BaÅŸtan silme
        public void BastanSil()
        {
            if (head == null)
            {
                Console.WriteLine("Liste boÅŸ!");
                return;
            }

            Console.WriteLine($"{head.Numara} numaralÄ± Ã¶ÄŸrenci listeden silindi (baÅŸtan).");
            head = head.Next;
        }

        // ğŸ”¸ Sondan silme
        public void SondanSil()
        {
            if (head == null)
            {
                Console.WriteLine("Liste boÅŸ!");
                return;
            }

            if (head.Next == null)
            {
                Console.WriteLine($"{head.Numara} numaralÄ± Ã¶ÄŸrenci listeden silindi (tek eleman).");
                head = null;
                return;
            }

            Node current = head;
            while (current.Next.Next != null)
                current = current.Next;

            Console.WriteLine($"{current.Next.Numara} numaralÄ± Ã¶ÄŸrenci sondan silindi.");
            current.Next = null;
        }

        // ğŸ”¸ Belirli bir Ã¶ÄŸrenciyi silme
        public void Sil(string numara)
        {
            if (head == null)
            {
                Console.WriteLine("Liste boÅŸ!");
                return;
            }

            if (head.Numara == numara)
            {
                Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci silindi.");
                head = head.Next;
                return;
            }

            Node prev = null;
            Node current = head;

            while (current != null && current.Numara != numara)
            {
                prev = current;
                current = current.Next;
            }

            if (current == null)
            {
                Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci bulunamadÄ±.");
                return;
            }

            prev.Next = current.Next;
            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci listeden silindi.");
        }

        // ğŸ”¸ Arama iÅŸlemi
        public void Ara(string numara)
        {
            Node current = head;
            while (current != null)
            {
                if (current.Numara == numara)
                {
                    Console.WriteLine($"Bulundu: {current}");
                    return;
                }
                current = current.Next;
            }
            Console.WriteLine($"{numara} numaralÄ± Ã¶ÄŸrenci bulunamadÄ±.");
        }

        // ğŸ”¸ Listeleme iÅŸlemi
        public void Display()
        {
            if (head == null)
            {
                Console.WriteLine("Liste boÅŸ!");
                return;
            }

            Console.WriteLine("\n--- Ã–ÄŸrenci Listesi ---");
            Node current = head;
            while (current != null)
            {
                Console.WriteLine(current);
                current = current.Next;
            }
            Console.WriteLine("-----------------------");
        }

        // ğŸ”¸ KullanÄ±cÄ±dan Ã¶ÄŸrenci ekleme
        public void KullanicidanEkle()
        {
            Console.Write("Ad: ");
            string ad = Console.ReadLine();
            Console.Write("Soyad: ");
            string soyad = Console.ReadLine();
            Console.Write("Numara: ");
            string numara = Console.ReadLine();

            SonaEkle(ad, soyad, numara);
        }
    }

    // ğŸ”¹ Main metodu
    static void Main(string[] args)
    {
        BagliListe liste = new BagliListe();

        // Ã–rnek kullanÄ±m
        liste.BasaEkle("Ahmet", "YÄ±lmaz", "101");
        liste.SonaEkle("AyÅŸe", "Demir", "102");
        liste.SonaEkle("Mehmet", "Kara", "103");
        liste.SonraEkle("102", "Zeynep", "Ã‡elik", "104");
        liste.OnceEkle("103", "Can", "AydÄ±n", "105");

        liste.Display();

        liste.Ara("104");
        liste.Sil("105");
        liste.SondanSil();
        liste.BastanSil();

        liste.Display();

        // KullanÄ±cÄ±dan ekleme iÃ§in aÃ§abilirsin:
        // liste.KullanicidanEkle();
    }
}
